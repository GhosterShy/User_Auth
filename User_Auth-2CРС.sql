CREATE TABLE users (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name VARCHAR2(100),
    last_name VARCHAR2(100),
    email VARCHAR2(255) UNIQUE,
    password_hash VARCHAR2(255),
    phone VARCHAR2(20),
    is_active NUMBER(1) DEFAULT 1,
    is_verified NUMBER(1) DEFAULT 0,
    created_at DATE DEFAULT SYSDATE,
    updated_at DATE
);

CREATE TABLE sessions (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER REFERENCES users(id),
    is_successful NUMBER(1),
    session_start DATE DEFAULT SYSDATE
);

CREATE TABLE support_tickets (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER REFERENCES users(id),
    subject VARCHAR2(255),
    created_at DATE DEFAULT SYSDATE
);

CREATE TABLE security_logs (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER,
    event_type VARCHAR2(50),
    event_timestamp DATE DEFAULT SYSDATE,
    ip_address VARCHAR2(50),
    device_info VARCHAR2(255)
);

CREATE TABLE audits (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER,
    table_name VARCHAR2(50),
    operation VARCHAR2(50),
    timestamp DATE DEFAULT SYSDATE,
    details VARCHAR2(255)
);

CREATE TABLE roles (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    role_name VARCHAR2(50)
);

CREATE TABLE user_history (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER,
    field_changed VARCHAR2(50),
    old_value VARCHAR2(255),
    new_value VARCHAR2(255),
    changed_at DATE DEFAULT SYSDATE
);




--Процедуры

-- Обновление
CREATE OR REPLACE PROCEDURE sp_update_email (
    p_user_id IN NUMBER,
    p_new_email IN VARCHAR2
)
AS
BEGIN
    UPDATE users
    SET email = p_new_email,
        updated_at = SYSDATE
    WHERE id = p_user_id;
END;


-- Удаление
CREATE OR REPLACE PROCEDURE sp_delete_user (
    p_user_id IN NUMBER
)
AS
BEGIN
    DELETE FROM users WHERE id = p_user_id;
END;


-- Смена статуса
CREATE OR REPLACE PROCEDURE sp_toggle_user_status (
    p_user_id IN NUMBER,
    p_new_status IN NUMBER
)
AS
BEGIN
    UPDATE users
    SET is_active = p_new_status,
        updated_at = SYSDATE
    WHERE id = p_user_id;
END;



BEGIN
    sp_update_email(p_user_id => 1, p_new_email => 'newemail@example.com');
    DBMS_OUTPUT.PUT_LINE('Email обновлён');


    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;




BEGIN
    sp_update_email(p_user_id => 1, p_new_email => 'newemail@example.com');
    DBMS_OUTPUT.PUT_LINE('Email обновлён');


    sp_toggle_user_status(p_user_id => 1, p_new_status => 0);
    DBMS_OUTPUT.PUT_LINE('Статус ЖАнартылды');


    sp_delete_user(p_user_id => 1);
    DBMS_OUTPUT.PUT_LINE('Пользователь удален');

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;





-- функции
CREATE OR REPLACE FUNCTION fn_get_full_name(p_user_id NUMBER)
RETURN VARCHAR2
IS
    v_full_name VARCHAR2(512);
BEGIN
    SELECT first_name || ' ' || last_name
    INTO v_full_name
    FROM users
    WHERE id = p_user_id;

    RETURN v_full_name;
END;


-- Подсчёт
CREATE OR REPLACE FUNCTION fn_successful_sessions(p_user_id NUMBER)
RETURN NUMBER
IS
    v_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_count
    FROM sessions
    WHERE user_id = p_user_id AND is_successful = 1;

    RETURN v_count;
END;


-- Проверка
CREATE OR REPLACE FUNCTION fn_is_verified(p_user_id NUMBER)
RETURN BOOLEAN
IS
    v_status NUMBER;
BEGIN
    SELECT is_verified INTO v_status
    FROM users
    WHERE id = p_user_id;

    RETURN v_status = 1;
END;


-- Подсчёт количества
CREATE OR REPLACE FUNCTION fn_total_tickets(p_user_id NUMBER)
RETURN NUMBER
IS
    v_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_count
    FROM support_tickets
    WHERE user_id = p_user_id;

    RETURN v_count;
END;


--Триггеры


CREATE OR REPLACE TRIGGER trg_logon_system
AFTER LOGON ON DATABASE
BEGIN
    INSERT INTO security_logs(user_id, event_type, event_timestamp, ip_address, device_info)
    VALUES (NULL, 'LOGON_EVENT', SYSDATE, 'localhost', 'GenericDevice');
END;



CREATE OR REPLACE TRIGGER trg_audit_user_delete
BEFORE DELETE ON users
FOR EACH ROW
BEGIN
    INSERT INTO audits(user_id, table_name, operation, timestamp, details)
    VALUES (:OLD.id, 'users', 'DELETE', SYSDATE, 'Удален');
END;



CREATE OR REPLACE TRIGGER trg_check_role_name
BEFORE INSERT ON roles
FOR EACH ROW
BEGIN
    IF LENGTH(:NEW.role_name) < 3 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Role name must have at least 3 characters.');
    END IF;
END;


-- Лог изменений
CREATE OR REPLACE TRIGGER trg_log_user_update
AFTER UPDATE ON users
FOR EACH ROW
BEGIN
    INSERT INTO user_history(user_id, field_changed, old_value, new_value, changed_at)
    VALUES (:OLD.id, 'general update', 'check audit', 'check audit', SYSDATE);
END;



--Транзакция
BEGIN
    SAVEPOINT sp1;

    INSERT INTO users (
        created_at, updated_at,
        first_name, last_name,
        email, password_hash,
        phone, is_active, is_verified
    ) VALUES (
        SYSDATE, SYSDATE,
        'Test', 'User',
        'test@user.com', 'hashed123',
        '9999999999', 1, 0
    );

    SAVEPOINT sp2;

    UPDATE users
    SET email = 'error_email'
    WHERE first_name = 'Test' AND last_name = 'User';

    ROLLBACK TO sp2;

    COMMIT;
END;
select * from users;


